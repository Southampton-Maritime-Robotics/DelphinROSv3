<launch>
    <param name="max-depth-demand"    value="4.5" />                  <!-- Maximum depth demand (m) -->
    <param name="over-depth"          value="5.0" />                  <!-- Maximum depth (m) - causes abort -->
    <param name="over-pitch"          value="45" />                   <!-- Maximum pitch (deg) - causes abort -->
    <param name="over-roll"           value="90" />                   <!-- Maximum roll (deg) - causes abort -->
    <param name="max-internal-temp"   value="45" />                   <!-- Maximum internal pressure vessel temp (deg) - causes abort -->
    <param name="min-motor-voltage"   value="19000" />                <!-- Minimum Motor voltage (mV) - causes abort -->
    <param name="mission-timeout"     value="1200.0" />              <!-- Mission timeout (minutes) -->
    <param name="lat_orig"            value="50.8669583333" />    <!-- Origin Latitude -->
    <param name="long_orig"           value="-1.779375" />            <!-- Origin Longitude -->
    <param name="ImportWaypoints"     value="False" />                <!-- Import Waypoints -->
    <param name="look_ahead_distance" value="10" />                   <!-- look ahead distance (in m) for track following algorithm  effectivly inverse of gain-->    
    

    <!--Notes-->
    <!--Testwood lat_orig=50.93642234975332 long_orig=-1.507850997377956 -->
    <!--Based on this origin X=12 and Y=15 is a good location for HOME at Testwood -->
    
    <!--Easleigh South lat_orig=50.95646666666666 long_orig=-1.366823 -->
    <!--Coordinates are for south pier, middle south of lake (X,Y) = (-32.3,22.6) -->
    
    <!--Easleigh North lat_orig=50.95702499999999 long_orig=-1.36675104 -->
    <!--Coordinates are for south pier, middle south of lake (X,Y) = (-24.6,30.0) -->
    

    <node name="mission_script" pkg="DelphinROSv2" type="mission_script_leo_withNAV.py"  output="screen" required="true" /> 
    
    <!-- Add all other nodes under here! -->
    <node name="gps" pkg="DelphinROSv2" type="gps_nmea2.py" /> 
    <node name="back_seat_driver" pkg="DelphinROSv2" type="BackSeatDriver.py" required="true" />
	
    <!-- <node name="compass_dummy" pkg="DelphinROSv2" type="compass_dummy.py" /> -->
    <node name="arduino" pkg="DelphinROSv2" type="arduino.py" /> 
    <node name="compass_oceanserver" pkg="DelphinROSv2" type="compass_oceanserver.py" /> 
    <node name="Cameras" pkg="DelphinROSv2" type="camera.py"/>
    <!-- <node name="SMS_modem" pkg="DelphinROSv2" type="SMS_modem.py" /> -->

    
    <node name="dead_reckoner" pkg="DelphinROSv2" type="dead_reckoner4.py"  /> 
    
    <!-- <node name="depth_controller" pkg="DelphinROSv2" type="depth_controller.py" output = "screen"/> -->
    <node name="heading_controller" pkg="DelphinROSv2" type="heading_controller.py"/>
    
    <!-- <node name="heading_controller_MPC_v1" pkg="DelphinROSv2" type="heading_controller_MPC_nonlinear_v1.py"/> -->
    <node name="depthandspeed_controller_MPC_v3" pkg="DelphinROSv2" type="depthandspeed_controller_MPC_nonlinear_v3.py" />
        
        
    <include file="$(find DelphinROSv2)/launch/thruster_system.launch" />        
  
    <node name="logger" pkg="DelphinROSv2" type="logger.py" output="screen"/> 
    <!-- <node name="smach_viewer" pkg="smach_viewer" type="smach_viewer.py" /> -->

    

</launch>
