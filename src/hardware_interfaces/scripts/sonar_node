#!/usr/bin/python
###########
#  VERSION AS OF 2/4/2012 


# TODO smaria
# At the moment, this is relying on data given in launch file
# a set of defaults would be nice, so this script can run independently
###########

import rospy
import serial
import time
import numpy
from std_msgs.msg import String
from std_msgs.msg import UInt16
from hardware_interfaces.msg import sonar	
from hardware_interfaces.msg import sonar_setting
from hardware_interfaces import sonar_interface 


SonarDevice = sonar_interface.SonarTritech()

################################################################
def sonarLoop():
    pub        = rospy.Publisher('sonar_output', String, queue_size=10)
    # Main operational loop #
    rospy.init_node('sonar_interface', anonymous=True)
    rate = rospy.Rate(rospy.get_param("/maxRate"))
    SonarDevice.updateFlag = 1

    while not rospy.is_shutdown():
        if SonarDevice.updateFlag == 1:
            SonarDevice.update_sonar_head_setting()
        SonarDevice.send_ping_trigger()
        SonarDevice.read_sonar()
        pub.publish(str(SonarDevice.Data))
        # it is unlikely that the sonar can keep up with the maximum rate,
        # but it should go as fast as possible, so the maximum rate is set
        rate.sleep()


            
################################################################

def shutdown():
    global serialPort
    serialPort.flushInput()
    serialPort.flushOutput()
    serialPort.close()

if __name__ == '__main__':
    try:
        rospy.Subscriber('sonar_updateSettings', sonar_setting, SonarDevice.read_setting_demand)
        rospy.on_shutdown(SonarDevice.serial_shutdown)
        sonarLoop()
    except rospy.ROSInterruptException:
        pass
