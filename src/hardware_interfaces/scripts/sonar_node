#!/usr/bin/python
"""
Driver for mechanical scanning sonar

Publishes raw sonar data

#####################################################
# TODO

"""
import rospy
from std_msgs.msg import String
from hardware_interfaces.msg import sonar_setting
from hardware_interfaces import sonar_interface


################################################################
def sonarLoop():
    pub = rospy.Publisher('sonar_output', String, queue_size=10)
    # Main operational loop #
    # it is unlikely that the sonar can keep up with the maximum rate,
    # but it should go as fast as possible, so the maximum rate is set
    rate = rospy.Rate(rospy.get_param("/maxRate"))
    SonarDevice.updateFlag = 0   # sonar tritech updates settings on initialisation

    while not rospy.is_shutdown():
        if SonarDevice.updateFlag == 1:
            SonarDevice.update_sonar_head_setting()
        SonarDevice.send_ping_trigger()
        SonarDevice.read_sonar()
        pub.publish(str(SonarDevice.Data))
        rate.sleep()


################################################################

def shutdown():
    global serialPort
    serialPort.flushInput()
    serialPort.flushOutput()
    serialPort.close()


if __name__ == '__main__':
    try:
        rospy.init_node('sonar_interface', anonymous=True)
        SonarDevice = sonar_interface.SonarTritech()
        rospy.Subscriber('sonar_updateSettings', sonar_setting, SonarDevice.read_setting_demand)
        rospy.on_shutdown(SonarDevice.serial_shutdown)
        sonarLoop()
    except rospy.ROSInterruptException:
        pass
