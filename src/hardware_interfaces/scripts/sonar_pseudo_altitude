#!/usr/bin/python
""" Generate and publish pseudo altitude from sonar data

based on Autosub6000 horizon tracking algorithm
"""

import rospy
import numpy as np
import time
import sys
import signal

from std_msgs.msg import Float32
from hardware_interfaces.msg import sonar_data
from hardware_interfaces.msg import compass
from hardware_interfaces.msg import altitude



################################################################

class pseudoAlt(object):
    # TODO move this into a library once I can remember how to add new librares...
    def __init__(self):
        self.pitch = 0
        self.altitude = 0
        # TODO add sonar message giving the trans bearing as a 16th gradians value
        # this way we can be closer to what the sonar actually works with
        # and it can be an INT!
        self.angleStep_degrees = rospy.getParam("/sonar/Step")/16. * 0.9
        self.LLim = rospy.getParam("/sonar/LLim")
        self.RLim = rospy.getParam("/sonar/RLim")
        self.number_of_angles = int((((self.LLim - self.RLim)%360) /self.angleStep_degrees) + 1)
        self.sonarResultArray = [-1.] * number_of_angles
        self.sonarPitchArray = [0] * number_of_angles

    def callback_compass(self, compass_data):
        self.pitch = compass_data.pitch

    def callback_altimeter(self, altimeter_data):
        self.pitch = altimeter_data.altitude_filt

    def generate_pseudo_altitude(self, sonar_result):
        """ calculate pseudo altitude
        """
        current_array_position = int((self.LLim-sonar_result.transBearing)%360 / self.angleStep_degrees)
        self.sonarResultArray[current_array_position] = sonar_result.TargetRange
        self.sonarPitchArray[current_array_position] = self.pitch
        horizonIdx = self.number_of_angles
        while (self.sonarResultArray[horizonIdx] == -1) and (horizonIdx != 0) :
            horizonIdx -= 1
        if self.sonarResultArray[horizonIdx] == -1:
            # all entries are invalid
            pseudo_alt = self.altitude
        else:
            angle = (horizonIdx * self.angleStep_degrees - self.LLim) + self.sonarPitchArray[idx]
            # floor parallel, below,  at max range should register at -90; corresponding pseudo alt = 1*range
            # wall at max range should register at 0; corresponding pseudo alt = 0
            # negative pseudo altitude for angles smaller than 
            pseudo_alt = -sonarResultArray[horizonIdx] * np.sin(np.radians(angle))
            pseudp_alt = min(self.altitude, pseudp_alt)
                
        pub.publish(pseudo_alt)

################################################################
################################################################
if __name__ == '__main__':

    rospy.init_node('sonar_pseudo_altitude')
    state = pseudoAlt()
    pub = rospy.Publisher('pseudo_altitude', Float32, queue_size=10)
    rospy.Subscriber('sonar_processed', sonar_data, state.generate_pseudo_altitude)
    rospy.Subscriber('compass_out', compass, callback_compass)
    rospy.Subscriber('altimeter_out', altitude, callback_altimeter)

    rospy.spin()

   
