#!/usr/bin/python
"""
Simple plotter for visualising sonar data live/from rosbag
 current plots:
 * live stream of all bins recorded (bins vs time)
 * polar plot using the most recent bins available for each angle (polar bins)
 

#############################################################
# TODO
 - make the figure zoom/drag etc. work again
 - make the figure set the plots new when NBINS/range get changed

"""

import rospy
import numpy
import time
import sys
import pyqtgraph as pg
from pyqtgraph.Qt import QtGui, QtCore
import signal

from std_msgs.msg import String
from std_msgs.msg import Float32
from hardware_interfaces.msg import sonar_data
from hardware_interfaces.msg import sonar	

from hardware_interfaces import sonar_analyse
from hardware_interfaces import sonar_plot

################################################################

def get_sonar(msgData):
    """ add sonar data to sonar object as it comes in from ROS messages as *msgData*
    """
    ping = sonar_analyse.SonarPing(msgData)
    plotData.add_data(ping)
    # update obstacle detection
    targetDetection = analyseData.detect_obstacle(ping)
    plotData.targetRange.append(targetDetection[2])


def draw_figures():
    """
    setup the Qt Window so it updates regularly and all settings are as wished
    """

    # make sure that ctrl+c quits:
    signal.signal(signal.SIGINT, signal.SIG_DFL)
    app = QtGui.QApplication(sys.argv)
    win = QtGui.QWidget()
    grid = QtGui.QGridLayout()    
    win.setLayout(grid)

    ## define all plots in the window
    w = 20
    # bins vs time
    bins_vs_time = pg.ImageView()
    grid.addWidget(bins_vs_time, 1, 1, 2*w, 2*w)

    # polar bins
    polar_bins = pg.ImageView()
    grid.addWidget(polar_bins, 1, 2*w + 1, 4*w, 4*w)

    label_0deg = QtGui.QLabel()
    label_0deg.setText("0 degrees")
    label_0deg.setStyleSheet('color: yellow')

    label_90deg = QtGui.QLabel()
    label_90deg.setText("90 degrees")
    label_90deg.setStyleSheet('color: yellow')

    label_180deg = QtGui.QLabel()
    label_180deg.setText("180 degrees")
    label_180deg.setStyleSheet('color: yellow')

    label_270deg = QtGui.QLabel()
    label_270deg.setText("270 degrees")
    label_270deg.setStyleSheet('color: yellow')


    grid.addWidget(label_270deg,         1, 4 * w, 4, 20)
    grid.addWidget(label_180deg,    2 * w, 2 * w + 5, 4, 20)
    grid.addWidget(label_90deg,   4 * w - 5, 4 * w, 4, 20)
    grid.addWidget(label_0deg,   2 * w, 6 * w - 20, 4, 20)


    # detected distance
    obstacle_detection = pg.PlotWidget()
    obstacle_detection.plot(plotData.targetRange[-150:])
    grid.addWidget(obstacle_detection, 2*w+3, 1, w, 2*w)



    # detect distance at fixed angle
    obstacle_angle = pg.PlotWidget()
    grid.addWidget(obstacle_angle, 3*w+3, 1, w, 2*w)




    def update_figures():
        datarange = min(len(plotData.bins), plotData.memory)
        if datarange > 0:
            bins_vs_time.setImage(numpy.array(plotData.bins[-datarange:]))
            polar_bins.setImage(plotData.polarImage)
            obstacle_detection.clear()
            obstacle_detection.plot(plotData.targetRange[-datarange:])
            obstacle_angle.clear()
            obstacle_angle.setYRange(0,15)
            obstacle_angle.plot(plotData.fixedAngleTarget[-datarange:])
 


    timer = QtCore.QTimer()
    timer.timeout.connect(update_figures)
    timer.start(50)
    win.show()
    QtGui.QApplication.instance().exec_()

################################################################
################################################################
if __name__ == '__main__':

    rospy.init_node('plot_sonar', log_level=rospy.DEBUG)
    rospy.Subscriber('sonar_output', String, get_sonar)
    plotData = sonar_plot.SonarPlot()
    analyseData = sonar_analyse.SonarEvaluate()
    time.sleep(1)
    draw_figures()
    
    
  
